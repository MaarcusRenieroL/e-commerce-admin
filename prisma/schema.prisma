// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  storeId String @id @default(uuid())

  storeName String
  userId    String

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  billboardId String @id @default(uuid())

  billboardLabel String
  imageUrl       String

  storeId String
  store   Store  @relation("StoreToBillboard", fields: [storeId], references: [storeId])

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  categoryId String @id @default(uuid())

  categoryLabel String

  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [storeId])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [billboardId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  sizeId String @id @default(uuid())

  name     String
  value    String
  storeId  String
  store    Store     @relation("StoreToSize", fields: [storeId], references: [storeId])
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  colorId String @id @default(uuid())

  name  String
  value String

  storeId String
  store   Store  @relation("StoreToColor", fields: [storeId], references: [storeId])

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  productId String @id @default(uuid())

  productName String
  price       Decimal

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [storeId])

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [categoryId])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [sizeId])

  colorId String
  color   Color  @relation(fields: [colorId], references: [colorId])

  images String[]
  orders OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  orderId String @id @default(uuid())

  storeId String
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [storeId])

  orderItems OrderItem[]

  isPaid Boolean @default(false)

  phone   String @default("")
  address String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  orderItemId String @id @default(uuid())

  orderId String
  order   Order @relation(fields: [orderId], references: [orderId])

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  @@index([orderId])
  @@index([productId])
}